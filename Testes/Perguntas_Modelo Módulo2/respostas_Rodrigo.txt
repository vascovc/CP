1.
a) Como a instrução MPI_Recv é blocking, o programa vai ficar bloqueado, pois cada processo vai ficar à espera que o outro envie a informação antes de prosseguir.

b) O programa vai prosseguir condicionalmente, pois como a instrução MPI_Send decide com base no tamanho da informação a enviar se vai funcionar como um send com buffer ou um send com synchronous. Se o MPI_Send decidir enviar a informação com buffer então irá prosseguir, caso contrário ficará bloqueado à espera que o outro processo receba a informação. Se o tamanho da informação for pequeno utiliza-se buffer, se for grande utiliza-se synchronous.

c) Seguir resolução do ex1 das aulas.
Acrescentar:

int buffer_size = (MPI_BSEND_OVERHEAD + count*sizeof(int));
char* buffer = malloc(buffer_size);
MPI_Buffer_attach(buffer, buffer_size);

if (myid == 0) {
	MPI_Bsend(b, count, MPI_REAL, 1, 0, comm);
	MPI_Recv(a, count, MPI_REAL, 1, 0, comm, MPI_STATUS_IGNORE);
}
else if (myid == 1) {
	MPI_Send(d, count, MPI_REAL, 0, 0, comm);
	MPI_Recv(c, count, MPI_REAL, 0, 0, comm, MPI_STATUS_IGNORE);
}

MPI_Buffer_detach(&buffer, &buffer_size);
free(buffer);

2.
a) Em vez de se enviar um elemento de cada vez, cria-se um novo datatype que engloba todos os elementos e envia-se apenas um "elemento" desse novo datatype, onde seguem todos os elementos do datatype antigo. Quem recebe não vê a diferença e recebe o stream de informação como seria com o datatype antigo.

b)
if (myid == 0) {
	MPI_Type_Vector(count, 1, 3, MPI_DOUBLE, &vtype);
	MPI_Type_commit(&vtype);
	MPI_Send(&source[2], 1, vtype, 1, 0, comm);
	MPI_Type_free(&vtype);
}
else if (myid == 1) {
	MPI_Recv(target, count, MPI_DOUBLE, 0, 0, comm, MPI_STATUS_IGNORE);
}

3.
a) imagem

b) Usar broadcast ou scatter
para identificar um subcomm -> if color == 0 por exemplo
fazer um broadcast para o MPI_COMM_WORLD e um broadcast para o subcomm

c) ?

4.
a) posglobal -> array de Nx3; 
comunicações por ordem:
broadcast -> posglobal enviado a todos os processos
scatter -> um para poslocal e outro para vellocal
allgather -> pois todos os processos têm de ficar com a informação do novo posglobal

b) Se os tamanhos de informação forem diferentes é preciso usar o allgatherv
